tRNA_bwa_florian$C = str_count(toupper(tRNA_bwa_florian$read_bases), "C")
tRNA_bwa_florian$MATCH = str_count(tRNA_bwa_florian$read_bases, "\\.") + str_count(tRNA_bwa_florian$read_bases, ",")
tRNA_bwa_florian = tRNA_bwa_florian[, c(1,2,3,4,7,8,9,10, 11)]
tRNA_error_pattern = merge(tRNA_bwa_florian, tRNA_error, by=c("#Ref","pos", "base"))
tRNA_error_pattern$`#Ref` = gsub("ec_tRNA", "", tRNA_error_pattern$`#Ref`)
tRNA_error_pattern = tidyr::separate(tRNA_error_pattern, `#Ref`, into = c("AS", "Isoacceptor1", "Isoacceptor2"), sep = "_", remove = F)
tRNA_error_pattern$Isoacceptor1 = paste(tRNA_error_pattern$AS, tRNA_error_pattern$Isoacceptor1, sep = "_")
tRNA_error_pattern$Isoacceptor2 = paste(tRNA_error_pattern$AS, tRNA_error_pattern$Isoacceptor2, sep = "_")
iso1 = tRNA_error_pattern[, -4]
iso2 = tRNA_error_pattern[, -3]
iso2 = iso2[-grep("NA", iso2$Isoacceptor2),]
colnames(iso1)[3] = "AS_iso"
colnames(iso2)[3] = "AS_iso"
tRNA_error_pattern = rbind(iso1, iso2)
tRNA_error_pattern$AS_iso = gsub("T", "U",tRNA_error_pattern$AS_iso )
tRNA_error_pattern$AS_iso_pos = paste(tRNA_error_pattern$AS_iso, tRNA_error_pattern$pos, sep = "_")
tRNA_error_all = merge.data.frame(tRNA_error_pattern, tRNA_Ecoli, by = c("AS", "iso", "pos"))
colnames(tRNA_error_pattern)
tRNA_error_all = merge.data.frame(tRNA_error_pattern, tRNA_Ecoli, by = c("AS_iso", "pos"))
colnames(tRNA_error_all)
tRNA_error_all = tRNA_error_all[, c("AS_iso", "AS.x", "pos", "base", "mod","mis", "ins", "del",  "A", "T", "G", "C", "cov", "q_mean", "q_std", "strand")]
View(tRNA_error_all)
tRNA_error_all = merge.data.frame(tRNA_error_pattern, tRNA_Ecoli, by = c("AS_iso", "pos"))
tRNA_error_all = tRNA_error_all[, c("AS_iso", "AS.x", "pos", "base", "mod","MATCH", "mis", "ins", "del",  "A", "T", "G", "C", "cov", "q_mean", "q_std", "strand")]
View(tRNA_error_all)
mod_list <- c()
for (i  in unique(tRNA_error_all$mod)){
tmp = tRNA_error_pattern[which(tRNA_error_pattern$mod == i),]
tmp  = tmp[order(tmp$mis, decreasing = T),]
mod_list[[i]] = tmp
}
View(mod_list)
mod_list <- c()
for (i  in unique(tRNA_error_all$mod)){
print(i)
tmp = tRNA_error_pattern[which(tRNA_error_pattern$mod == i),]
tmp  = tmp[order(tmp$mis, decreasing = T),]
mod_list[[i]] = tmp
}
mod_list <- c()
for (i  in unique(tRNA_error_all$mod)){
print(i)
tmp = tRNA_error_pattern[which(tRNA_error_pattern$mod == i),]
print(head(tmp))
tmp  = tmp[order(tmp$mis, decreasing = T),]
mod_list[[i]] = tmp
}
tRNA_error_pattern$mod
tRNA_error_pattern
mod_list <- c()
for (i  in unique(tRNA_error_all$mod)){
print(i)
tmp = tRNA_error_all[which(tRNA_error_all$mod == i),]
print(head(tmp))
tmp  = tmp[order(tmp$mis, decreasing = T),]
mod_list[[i]] = tmp
}
View(mod_list)
View(mod_list[["D"]])
mod_list <- c()
average_data <- data.frame()
for (i  in unique(tRNA_error_all$mod)){
print(i)
tmp = tRNA_error_all[which(tRNA_error_all$mod == i),]
print(head(tmp))
tmp  = tmp[order(tmp$mis, decreasing = T),]
mod_list[[i]] = tmp
tmp2 = data.frame(mod = i,
base = tmp$base,
n_AS_iso = unique(tmp$AS_iso),
n_AS = unique(tmp$AS.x),
mis_avg = mean(tmp$mis),
del_avg = mean(tmp$del),
ins_avg = mean(tmp$ins))
average_data = rbind(average_data, tmp2)
}
rbind(average_data, tmp2)
tmp2 = data.frame(mod = i,
base = tmp$base,
n_AS_iso = unique(tmp$AS_iso),
n_AS = unique(tmp$AS.x),
mis_avg = mean(tmp$mis),
del_avg = mean(tmp$del),
ins_avg = mean(tmp$ins))
paste0(unique(tmp$AS.x, sep = ",")
)
paste0(unique(tmp$AS.x, collapse = ","))
paste0(unique(tmp$AS.x), collapse = ","))
paste0(unique(tmp$AS.x), collapse = ",")
mod_list <- c()
average_data <- data.frame()
for (i  in unique(tRNA_error_all$mod)){
print(i)
tmp = tRNA_error_all[which(tRNA_error_all$mod == i),]
print(head(tmp))
tmp  = tmp[order(tmp$mis, decreasing = T),]
mod_list[[i]] = tmp
tmp2 = data.frame(mod = i,
base = tmp$base,
n_AS_iso = length(unique(tmp$AS_iso)),
n_AS = length(unique(tmp$AS.x)),
AS = paste0(unique(tmp$AS.x), collapse = ","),
mis_avg = mean(tmp$mis),
del_avg = mean(tmp$del),
ins_avg = mean(tmp$ins))
average_data = rbind(average_data, tmp2)
}
View(average_data)
mod_list <- c()
average_data <- data.frame()
for (i  in unique(tRNA_error_all$mod)){
print(i)
tmp = tRNA_error_all[which(tRNA_error_all$mod == i),]
tmp  = tmp[order(tmp$mis, decreasing = T),]
mod_list[[i]] = tmp
tmp2 = data.frame(mod = i,
base = tmp$base,
n_AS_iso = length(unique(tmp$AS_iso)),
n_AS = length(unique(tmp$AS.x)),
AS = paste0(unique(tmp$AS.x), collapse = ","),
mis_avg = mean(tmp$mis),
del_avg = mean(tmp$del),
ins_avg = mean(tmp$ins))
average_data = rbind(average_data, tmp2)
}
mod_list <- c()
average_data <- data.frame()
for (i  in unique(tRNA_error_all$mod)){
print(i)
tmp = tRNA_error_all[which(tRNA_error_all$mod == i),]
tmp  = tmp[order(tmp$mis, decreasing = T),]
mod_list[[i]] = tmp
tmp2 = data.frame(mod = i,
base = paste0(unique(tmp$base), collapse = ","),
n_AS_iso = length(unique(tmp$AS_iso)),
n_AS = length(unique(tmp$AS.x)),
AS = paste0(unique(tmp$AS.x), collapse = ","),
mis_avg = mean(tmp$mis),
del_avg = mean(tmp$del),
ins_avg = mean(tmp$ins))
average_data = rbind(average_data, tmp2)
}
View(average_data)
library(org.Mm.eg.db)
library(AnnotationDbi)
library(mygene)
#------------------------------------------------------------
#GO Term look-up analysis
library(org.Mm.eg.db)
library(AnnotationDbi)
library(mygene)
#The function returns a table with genes and the associated GO terms (biological processes only) supported by literature evidnece
#The gene argument is a list of gene symbols of interest (MGI for mouse and HUGO for human)
getGOs <- function(gene, species, ont){
results_ontData = data.frame()
for (i in 1:length(gene)){
hits<-query(gene[i], fields='go', species=species)$hits
got <- lapply(hits, as.list)
if(is.data.frame(got$go[[ont]])==TRUE){
ontData <- got$go[[ont]]
if ("pubmed" %in% colnames(ontData)) {
ontData <- data.frame(cbind(ontData$pubmed, ontData$term))
colnames(ontData) <- c("pubmed", ont)
ontData <- ontData[!is.na(ontData$pubmed),]
ontData <- ontData[ontData$pubmed != "NULL",]
if(nrow(ontData)>0) {
ontData <- data.frame(ontData, rep(gene[i], nrow(ontData)))
colnames(ontData) <- c("pubmed",ont, "gene")
results_ontData <- rbind(results_ontData, ontData)
}
}
}
if(is.data.frame(got$go[[ont]])==FALSE){
for (j in 1:length(got$go[[ont]])){
ontData <- as.data.frame(got$go[[ont]][j])
if ("pubmed" %in% colnames(ontData)) {
ontData <- data.frame(cbind(ontData$pubmed, ontData$term))
colnames(ontData) <- c("pubmed", ont)
ontData <- ontData[!is.na(ontData$pubmed),]
ontData <- ontData[ontData$pubmed != "NULL",]
if(nrow(ontData)>0) {
ontData <- data.frame(ontData, rep(gene[i], nrow(ontData)))
colnames(ontData) <- c("pubmed",ont, "gene")
results_ontData <- rbind(results_ontData, ontData)
}
}
}
}
print(i)
}
return(results_ontData)
}
gene = "Apoe4"
species = "mouse"
gene = "Neurod2"
ont = "BP"
results_ontData = data.frame()
i = 2
i = 1
hits<-query(gene[i], fields='go', species=species)$hits
hits
got <- lapply(hits, as.list)
if(is.data.frame(got$go[[ont]])==TRUE){
ontData <- got$go[[ont]]
if ("pubmed" %in% colnames(ontData)) {
ontData <- data.frame(cbind(ontData$pubmed, ontData$term))
colnames(ontData) <- c("pubmed", ont)
ontData <- ontData[!is.na(ontData$pubmed),]
ontData <- ontData[ontData$pubmed != "NULL",]
if(nrow(ontData)>0) {
ontData <- data.frame(ontData, rep(gene[i], nrow(ontData)))
colnames(ontData) <- c("pubmed",ont, "gene")
results_ontData <- rbind(results_ontData, ontData)
}
}
}
if(is.data.frame(got$go[[ont]])==FALSE){
for (j in 1:length(got$go[[ont]])){
ontData <- as.data.frame(got$go[[ont]][j])
if ("pubmed" %in% colnames(ontData)) {
ontData <- data.frame(cbind(ontData$pubmed, ontData$term))
colnames(ontData) <- c("pubmed", ont)
ontData <- ontData[!is.na(ontData$pubmed),]
ontData <- ontData[ontData$pubmed != "NULL",]
if(nrow(ontData)>0) {
ontData <- data.frame(ontData, rep(gene[i], nrow(ontData)))
colnames(ontData) <- c("pubmed",ont, "gene")
results_ontData <- rbind(results_ontData, ontData)
}
}
}
}
results_ontData
getGOs <- function(gene, species, ont){
results_ontData = data.frame()
for (i in 1:length(gene)){
hits<-query(gene[i], fields='go', species=species)$hits
got <- lapply(hits, as.list)
if(is.data.frame(got$go[[ont]])==TRUE){
ontData <- got$go[[ont]]
if ("pubmed" %in% colnames(ontData)) {
ontData <- data.frame(cbind(ontData$pubmed, ontData$term))
colnames(ontData) <- c("pubmed", ont)
ontData <- ontData[!is.na(ontData$pubmed),]
ontData <- ontData[ontData$pubmed != "NULL",]
if(nrow(ontData)>0) {
ontData <- data.frame(ontData, rep(gene[i], nrow(ontData)))
colnames(ontData) <- c("pubmed",ont, "gene")
results_ontData <- rbind(results_ontData, ontData)
}
}
}
if(is.data.frame(got$go[[ont]])==FALSE){
for (j in 1:length(got$go[[ont]])){
ontData <- as.data.frame(got$go[[ont]][j])
if ("pubmed" %in% colnames(ontData)) {
ontData <- data.frame(cbind(ontData$pubmed, ontData$term))
colnames(ontData) <- c("pubmed", ont)
ontData <- ontData[!is.na(ontData$pubmed),]
ontData <- ontData[ontData$pubmed != "NULL",]
if(nrow(ontData)>0) {
ontData <- data.frame(ontData, rep(gene[i], nrow(ontData)))
colnames(ontData) <- c("pubmed",ont, "gene")
results_ontData <- rbind(results_ontData, ontData)
}
}
}
}
print(i)
}
return(results_ontData)
}
getGOs(gene = "Neurod2", species = "mouse", ont = "BP")
library(shiny); runApp('Desktop/updated_updated_nextflow/nextflow_dRNA_seq/live_dRNA_seq_UI.R')
runApp('Desktop/updated_updated_nextflow/nextflow_dRNA_seq/live_dRNA_seq_UI.R')
runApp('Desktop/updated_updated_nextflow/nextflow_dRNA_seq/live_dRNA_seq_UI.R')
runApp('Desktop/updated_updated_nextflow/nextflow_dRNA_seq/live_dRNA_seq_UI.R')
runApp('Desktop/updated_updated_nextflow/nextflow_dRNA_seq/live_dRNA_seq_UI.R')
runApp('Desktop/updated_updated_nextflow/nextflow_dRNA_seq/live_dRNA_seq_UI.R')
library(shiny); runApp('Desktop/updated_updated_nextflow/nextflow_dRNA_seq/tmp_shiny2.R')
runApp('Desktop/updated_updated_nextflow/nextflow_dRNA_seq/tmp_shiny2.R')
runApp('Desktop/updated_updated_nextflow/nextflow_dRNA_seq/tmp_shiny2.R')
library(shiny); runApp('Desktop/updated_updated_nextflow/nextflow_dRNA_seq/live_dRNA_seq_UI.R')
#### Load modomics modication locations at Ecoli's tRNAs
tRNA <- as.data.frame(read_delim("/media/anna/Elements/Backup/Projects2021/10_ONT_DNAmethylation/Ecoli_tRNA_run/modomics_mod_positions/tRNA.mods",
delim = "\t", escape_double = FALSE,
col_names = c("type", "AS", "iso", "source", "Species", "pos", "info", "mod", "reference"), trim_ws = TRUE))
tRNA_Ecoli = tRNA[tRNA$Species == "Escherichia coli",]
tRNA_Ecoli$AS = substr(tRNA_Ecoli$AS, 1, nchar(tRNA_Ecoli$AS)-1)
tRNA_Ecoli$AS_iso = paste(tRNA_Ecoli$AS, tRNA_Ecoli$iso, sep  = "_")
tRNA <- as.data.frame(read_delim("/media/anna/Elements/Backup/Projects2021/10_ONT_DNAmethylation/Ecoli_tRNA_run/modomics_mod_positions/tRNA.mods",
delim = "\t", escape_double = FALSE,
col_names = c("type", "AS", "iso", "source", "Species", "pos", "info", "mod", "reference"), trim_ws = TRUE))
####################### Analyze Modifications ####################
###### Ecoli tRNA WT vs KO
library(reads)
####################### Analyze Modifications ####################
###### Ecoli tRNA WT vs KO
library(readr)
#### Load modomics modication locations at Ecoli's tRNAs
tRNA <- as.data.frame(read_delim("/media/anna/Elements/Backup/Projects2021/10_ONT_DNAmethylation/Ecoli_tRNA_run/modomics_mod_positions/tRNA.mods",
delim = "\t", escape_double = FALSE,
col_names = c("type", "AS", "iso", "source", "Species", "pos", "info", "mod", "reference"), trim_ws = TRUE))
tRNA_Ecoli = tRNA[tRNA$Species == "Escherichia coli",]
tRNA_Ecoli$AS = substr(tRNA_Ecoli$AS, 1, nchar(tRNA_Ecoli$AS)-1)
tRNA_Ecoli$AS_iso = paste(tRNA_Ecoli$AS, tRNA_Ecoli$iso, sep  = "_")
tRNA_error_KO <- as.data.frame(read_csv("/media/anna/Elements/Backup/Projects2021/10_ONT_DNAmethylation/Ecoli_tRNA_KO_WT/KO.bwa.plus_strand.per.site.5mer.sumErr.csv"))
tRNA_error_WT <- as.data.frame(read_csv("/media/anna/Elements/Backup/Projects2021/10_ONT_DNAmethylation/Ecoli_tRNA_KO_WT/WT.bwa.plus_strand.per.site.5mer.sumErr.csv"))
head(tRNA_error_WT)
tRNA_predict = tRNA_error_KO
tRNA_predict <- as.data.frame(tRNA_predict)
tRNA_predict$`#Ref` <- gsub("ec_tRNA", "", tRNA_predict$`#Ref`)
tRNA_predict = tidyr::separate(tRNA_predict, col = `#Ref`, into = c("AS", "POS", "5MER", "Strand"), sep = " ")
tmp = tRNA_predict[which(str_count(tRNA_predict$AS, pattern = "_") == 2), ]
library(stringr)
tmp = tRNA_predict[which(str_count(tRNA_predict$AS, pattern = "_") == 2), ]
tmp
tRNA_predict$`#Ref`
tRNA_predict <- as.data.frame(tRNA_predict)
tRNA_predict
tRNA_predict = tRNA_error_KO
tRNA_predict <- as.data.frame(tRNA_predict)
tRNA_predict$`#Ref`
tRNA_predict$`#Ref` <- gsub("ec_tRNA", "", tRNA_predict$`#Ref`)
tRNA_predict$`#Ref`
tRNA_predict
tRNA_predict[which(str_count(tRNA_predict$`#Ref`, pattern = "_") == 2), ]
tmp = tRNA_predict[which(str_count(tRNA_predict$`#Ref`, pattern = "_") == 2), ]
tmp$`#Ref` = paste0(str_split(tmp$`#Ref`, "_")[[1]][1],"_", str_split(tmp$`#Ref`, "_")[[1]][3])
tmp
paste0(str_split(tmp$`#Ref`, "_")[[1]][1],"_", str_split(tmp$`#Ref`, "_")[[1]][3])
gsub("ec_tRNA", "", tRNA_predict$`#Ref`)
tmp
tmp = tRNA_predict[which(str_count(tRNA_predict$`#Ref`, pattern = "_") == 2), ]
tmp
str_split(tmp$`#Ref`, "_")
paste0(str_split(tmp$`#Ref`, "_")[[1]][1],"_", str_split(tmp$`#Ref`, "_")[[1]][3])
str_split(tmp$`#Ref`, "_")[[1]][1]
tmp$`#Ref`
str_split(tmp$`#Ref`, "_")
lapply(str_split(tmp$`#Ref`, "_"), "[[", 1)
paste0(unlist(lapply(str_split(tmp$`#Ref`, "_"), "[[", 1)),"_", unlist(lapply(str_split(tmp$`#Ref`, "_"), "[[", 3)))
tmp$`#Ref` = paste0(unlist(lapply(str_split(tmp$`#Ref`, "_"), "[[", 1)),"_", unlist(lapply(str_split(tmp$`#Ref`, "_"), "[[", 3)))
tmp
tRNA_predict = rbind(tRNA_predict, tmp)
unique(tRNA_predict[which(str_count(tRNA_predict$`#Ref`, pattern = "_") == 2), "#Ref"])
tRNA_predict[which(str_count(tRNA_predict$AS, pattern = "_") == 2), "#Ref"]
tRNA_predict[which(str_count(tRNA_predict$`#Ref`, pattern = "_") == 2), "#Ref"]
tRNA_predict = tRNA_error_KO
tRNA_predict <- as.data.frame(tRNA_predict)
tRNA_predict$`#Ref` <- gsub("ec_tRNA", "", tRNA_predict$`#Ref`)
tmp = tRNA_predict[which(str_count(tRNA_predict$`#Ref`, pattern = "_") == 2), ]
tmp$`#Ref` = paste0(unlist(lapply(str_split(tmp$`#Ref`, "_"), "[[", 1)),"_", unlist(lapply(str_split(tmp$`#Ref`, "_"), "[[", 3)))
tRNA_predict = rbind(tRNA_predict, tmp)
tRNA_predict[which(str_count(tRNA_predict$`#Ref`, pattern = "_") == 2), "#Ref"] = paste0(unlist(lapply(str_split(tRNA_predict$`#Ref`, "_"), "[[", 1)),"_", unlist(lapply(str_split(tRNA_predict$`#Ref`, "_"), "[[", 2)))
tRNA_predict = tRNA_error_KO
tRNA_predict <- as.data.frame(tRNA_predict)
tRNA_predict$`#Ref` <- gsub("ec_tRNA", "", tRNA_predict$`#Ref`)
tmp = tRNA_predict[which(str_count(tRNA_predict$`#Ref`, pattern = "_") == 2), ]
tmp$`#Ref` = paste0(unlist(lapply(str_split(tmp$`#Ref`, "_"), "[[", 1)),"_", unlist(lapply(str_split(tmp$`#Ref`, "_"), "[[", 3)))
tRNA_predict = rbind(tRNA_predict, tmp)
tmp_i = which(str_count(tRNA_predict$`#Ref`, pattern = "_") == 2)
tRNA_predict[tmp_i, "#Ref"] = paste0(unlist(lapply(str_split(tRNA_predict[tmp_i, "#Ref"], "_"), "[[", 1)),"_", unlist(lapply(str_split(tRNA_predict[tmp_i, "#Ref"], "_"), "[[", 2)))
tRNA_predict
colnames(tRNA_predict)[1] = "AS"
new_df = data.frame()
for (i in 1:nrow(tRNA_predict)){
print(i)
pos = tRNA_predict[i, "pos"]
pos_split = as.numeric(strsplit(pos, "-")[[1]])
AS_iso = tRNA_predict[i, "AS"]
AS_iso = gsub("T", "U", AS_iso)
mod_i = which(tRNA_known$AS_iso == AS_iso & tRNA_known$pos >= pos_split[1] & tRNA_known$pos <= pos_split[2])
if (length(mod_i) > 0){
new_df = rbind(new_df, data.frame(tRNA_predict[i, ], tRNA_known[mod_i, ]))
}
}
tRNA_known = tRNA_Ecoli
new_df = data.frame()
for (i in 1:nrow(tRNA_predict)){
print(i)
pos = tRNA_predict[i, "pos"]
pos_split = as.numeric(strsplit(pos, "-")[[1]])
AS_iso = tRNA_predict[i, "AS"]
AS_iso = gsub("T", "U", AS_iso)
mod_i = which(tRNA_known$AS_iso == AS_iso & tRNA_known$pos >= pos_split[1] & tRNA_known$pos <= pos_split[2])
if (length(mod_i) > 0){
new_df = rbind(new_df, data.frame(tRNA_predict[i, ], tRNA_known[mod_i, ]))
}
}
new_df
combine_patterns <- function(tRNA_predict, tRNA_known){
tRNA_predict <- as.data.frame(tRNA_predict)
tRNA_predict$`#Ref` <- gsub("ec_tRNA", "", tRNA_predict$`#Ref`)
tmp = tRNA_predict[which(str_count(tRNA_predict$`#Ref`, pattern = "_") == 2), ]
tmp$`#Ref` = paste0(unlist(lapply(str_split(tmp$`#Ref`, "_"), "[[", 1)),"_", unlist(lapply(str_split(tmp$`#Ref`, "_"), "[[", 3)))
tRNA_predict = rbind(tRNA_predict, tmp)
tmp_i = which(str_count(tRNA_predict$`#Ref`, pattern = "_") == 2)
tRNA_predict[tmp_i, "#Ref"] = paste0(unlist(lapply(str_split(tRNA_predict[tmp_i, "#Ref"], "_"), "[[", 1)),"_", unlist(lapply(str_split(tRNA_predict[tmp_i, "#Ref"], "_"), "[[", 2)))
colnames(tRNA_predict)[1] = "AS"
new_df = data.frame()
for (i in 1:nrow(tRNA_predict)){
pos = tRNA_predict[i, "pos"]
pos_split = as.numeric(strsplit(pos, "-")[[1]])
AS_iso = tRNA_predict[i, "AS"]
AS_iso = gsub("T", "U", AS_iso)
mod_i = which(tRNA_known$AS_iso == AS_iso & tRNA_known$pos >= pos_split[1] & tRNA_known$pos <= pos_split[2])
if (length(mod_i) > 0){
new_df = rbind(new_df, data.frame(tRNA_predict[i, ], tRNA_known[mod_i, ]))
}
}
return(new_df)
}
tRNA_KO <- combine_patterns(tRNA_predict = tRNA_error_KO, tRNA_known)
tRNA_WT <- combine_patterns(tRNA_predict = tRNA_error_WT, tRNA_known)
tRNA_KO
tRNA_WT
### Add modification column
tRNA_KO[grep("m", tRNA_KO$mod),]
### Add modification column
tRNA_KO[grep("m", tRNA_KO$mod),"mod"]
### Add modification column
methylations <- read.csv("/media/anna/Elements/Backup/Projects2021/10_ONT_DNAmethylation/methylation_modifications.csv")
methylations
unique(tRNA_KO[grep("m", tRNA_KO$mod),"mod"])
unique(tRNA_KO[which(tRNA_KO$mod %in% methylations$Short.Name),])
unique(tRNA_KO[which(tRNA_KO$mod %in% methylations$Short.Name),"mod"])
tRNA_KO$modified = ifelse(tRNA_KO$mod %in% methylations$Short.Name, "unm", "unm")
tRNA_WT$modified = ifelse(tRNA_WT$mod %in% methylations$Short.Name, "mod", "unm")
write.csv(tRNA_WT, file = "/media/anna/Elements/Backup/Projects2021/10_ONT_DNAmethylation/Ecoli_tRNA_KO_WT/WT.bwa.plus_strand.per.site.5mer.sumErr_mod.csv")
write.csv(tRNA_KO, file = "/media/anna/Elements/Backup/Projects2021/10_ONT_DNAmethylation/Ecoli_tRNA_KO_WT/KO.bwa.plus_strand.per.site.5mer.sumErr_mod.csv")
colnames(tRNA_WT)
View(tRNA_KO)
x = rbind(tRNA_KO[, c(1,2,3,4,5,10,18,21)], tRNA_WT[, c(1,2,3,4,5,10,18,21)])
write.table(x, "/media/anna/Elements/Backup/Projects2021/10_ONT_DNAmethylation/Ecoli_tRNA_KO_WT/KO_WT_combined.csv", col.names = T, row.names = F, quote = F, sep = ",")
library(shiny); runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/live_dRNA_seq_UI.R')
runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/live_dRNA_seq_UI.R')
runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/live_dRNA_seq_UI.R')
runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/live_dRNA_seq_UI.R')
library(bambu)
library(DEXSeq)
library(DESeq2)
bamFiles <- system.file("extdata", "SGNex_A549_directRNA_replicate5_run1_chr9_1_1000000.bam", package = "bambu") # output folder with all merged bam files
fa.file <- system.file("extdata", "Homo_sapiens.GRCh38.dna_sm.primary_assembly_chr9_1_1000000.fa", package = "bambu") # input$fasta.file (genome)
gtf.file <- system.file("extdata", "Homo_sapiens.GRCh38.91_chr9_1_1000000.gtf", package = "bambu") # input$gtf.file (genome)
meta.data.file <- input$metadata
bamFiles <- system.file("extdata", "SGNex_A549_directRNA_replicate5_run1_chr9_1_1000000.bam", package = "bambu") # output folder with all merged bam files
fa.file <- system.file("extdata", "Homo_sapiens.GRCh38.dna_sm.primary_assembly_chr9_1_1000000.fa", package = "bambu") # input$fasta.file (genome)
gtf.file <- system.file("extdata", "Homo_sapiens.GRCh38.91_chr9_1_1000000.gtf", package = "bambu") # input$gtf.file (genome)
se <- bambu(reads = bamFiles, annotations = bambuAnnotations, genome = fa.file)
bambuAnnotations <- prepareAnnotations(gtf.file)
se <- bambu(reads = bamFiles, annotations = bambuAnnotations, genome = fa.file)
assays(se)$counts
plotBambu(se, type = "heatmap", transcript_id = "ENST00000190165")
###################HERE###################
plotBambu(se, type = "annotation", transcript_id = "ENST00000190165")
seq <- bambu::transcriptToGeneExpression(se)
seq
###################HERE###################
plotBambu(seq, type = "annotation", gene_id = "ENSG00000064218")
seq
###################HERE###################
plotBambu(seq, type = "annotation", gene_id = "ENSG00000283921")
dxd <- DEXSeqDataSet(countData = round(assays(se)$counts), sampleData = as.data.frame(colData(se)),
design = ~sample + exon + condition:exon, featureID = rowData(se)$TXNAME, groupID = rowData(se)$GENEID)
rowData(se)$TXNAME
rowData(se)$GENEID
se@assays
assays(se)$counts
round(assays(se)$counts)
memuse::Sys.meminfo()
install.packages(memuse)
install.packages("memuse")
memuse::Sys.meminfo()
memuse::Sys.meminfo()
memuse::Sys.meminfo()
library(dplyr)
library(stringr)
library(yaml)
library(reticulate)
library(BiocParallel)
library(foreach)
library(bambu)
library(shiny); runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/live_dRNA_seq_UI.R')
runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/live_dRNA_seq_UI.R')
runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/live_dRNA_seq_UI.R')
runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/live_dRNA_seq_UI.R')
gc()
library(shiny); runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/live_dRNA_seq_UI.R')
runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/updated_gui.R')
library(shiny); runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/updated_gui.R')
library(shiny); runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/updated_gui.R')
runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/updated_gui.R')
library(shiny); runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/updated_gui.R')
runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/updated_gui.R')
runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/updated_gui.R')
runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/updated_gui.R')
runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/app/nanoporeata_app.R')
runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/app/nanoporeata_app.R')
runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/app/nanoporeata_app.R')
runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/app/nanoporeata_app.R')
runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/app/nanoporeata_app.R')
runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/app/nanoporeata_app.R')
runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/app/nanoporeata_app.R')
runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/app/nanoporeata_app.R')
runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/app/nanoporeata_app.R')
runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/app/nanoporeata_app.R')
library(shiny); runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/app/nanoporeata_app.R')
runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/app/nanoporeata_app.R')
library(shiny); runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/app/nanoporeata_app.R')
library(shiny); runApp('/media/anna/Elements/Backup/Projects2021/07_ShinyDashboard/nextflow_dRNA_seq/app/nanoporeata_app.R')
shiny::runApp()
